import 'telescope.builtin' as builtin

find =
  name: 'Find'
  f: { builtin.find_files, 'Files' }
  g: { builtin.live_grep, 'Live Grep' }
  b: { builtin.buffers, 'Buffers' }
  h: { builtin.help_tags, 'Help Tags' }
  e: { '<cmd>NvimTreeToggle<CR>', 'File Explorer' }

lang_opts =
  name: 'Code (LSP)'
  R: { '<cmd>Trouble lsp_references<cr>', 'Trouble References' }
  a: { '<cmd>lua vim.lsp.buf.code_action()<CR>', 'Code Action' }
  d: { '<cmd>Telescope diagnostics<CR>', 'Diagnostics' }
  f: { '<cmd>Lspsaga lsp_finder<CR>', 'Finder' }
  i: { '<cmd>LspInfo<CR>', 'Lsp Info' }
  n: { '<cmd>Lspsaga rename<CR>', 'Rename' }
  r: { '<cmd>Telescope lsp_references<CR>', 'Diagnostics' }
  t: { '<cmd>TroubleToggle<CR>', 'Trouble' }
  g:
    name: 'Goto'
    d: { '<cmd>lua vim.lsp.buf.definition()<CR>', 'Definition' }
    D: { '<cmd>lua vim.lsp.buf.declaration()<CR>', 'Declaration' }
    h: { '<cmd>lua vim.lsp.buf.signature_help()<CR>', 'Signature Help' }
    I: { '<cmd>Telescope lsp_implementations<CR>', 'Goto Implementation' }
    b: { '<cmd>lua vim.lsp.buf.type_definition()<CR>', 'Goto Type Definition' }

debug =
  name: 'Debug'
  R: { "<cmd>lua require'dap'.run_to_cursor()<cr>", "Run to Cursor" }
  E: { "<cmd>lua require'dapui'.eval(vim.fn.input '[Expression] > ')<cr>", "Evaluate Input" }
  C: { "<cmd>lua require'dap'.set_breakpoint(vim.fn.input '[Condition] > ')<cr>", "Conditional Breakpoint" }
  U: { "<cmd>lua require'dapui'.toggle()<cr>", "Toggle UI" }
  b: { "<cmd>lua require'dap'.step_back()<cr>", "Step Back" }
  c: { "<cmd>lua require'dap'.continue()<cr>", "Continue" }
  d: { "<cmd>lua require'dap'.disconnect()<cr>", "Disconnect" }
  e: { "<cmd>lua require'dapui'.eval()<cr>", "Evaluate" }
  g: { "<cmd>lua require'dap'.session()<cr>", "Get Session" }
  h: { "<cmd>lua require'dap.ui.widgets'.hover()<cr>", "Hover Variables" }
  S: { "<cmd>lua require'dap.ui.widgets'.scopes()<cr>", "Scopes" }
  i: { "<cmd>lua require'dap'.step_into()<cr>", "Step Into" }
  o: { "<cmd>lua require'dap'.step_over()<cr>", "Step Over" }
  p: { "<cmd>lua require'dap'.pause.toggle()<cr>", "Pause" }
  q: { "<cmd>lua require'dap'.close()<cr>", "Quit" }
  r: { "<cmd>lua require'dap'.repl.toggle()<cr>", "Toggle Repl" }
  s: { "<cmd>lua require'dap'.continue()<cr>", "Start" }
  t: { "<cmd>lua require'dap'.toggle_breakpoint()<cr>", "Toggle Breakpoint" }
  x: { "<cmd>lua require'dap'.terminate()<cr>", "Terminate" }
  u: { "<cmd>lua require'dap'.step_out()<cr>", "Step Out" }

git =
  name: 'Git'
  g: 
    * "<cmd>lua require'neogit'.open({ kind = 'replace' })<cr>"
    * "Open Menu"
  c: 
    * "<cmd>lua require'neogit'.open({ 'commit' })<cr>"
    * "Commit"

leader_mappings =
  f: find
  l: lang_opts
  d: debug
  g: git

leader_opts =
  mode: 'n'
  prefix: '<leader>'
  buffer: nil
  silent: true
  noremap: true
  nowait: false

noleader_mappings =
  K: { '<cmd>Lspsaga hover_doc<cr>', 'Documentation' }
  '<c-L>': { '<cmd>bnext<CR>', 'Go to next buffer' }
  '<c-H>': { '<cmd>bprevious<CR>', 'Go to previous buffer' }

noleader_opts =
  mode: 'n'
  prefix: ''
  buffer: nil
  silent: true
  noremap: true
  nowait: false

export default ->
  wk = require 'which-key'

  wk.register leader_mappings, leader_opts
  wk.register noleader_mappings, noleader_opts

